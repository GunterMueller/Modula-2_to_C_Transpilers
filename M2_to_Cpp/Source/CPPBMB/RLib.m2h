/* -------------------------------------------------------------------- *
 *                 BMB Modula-2 Cross-Platform Library                  *
 *                              C++ Port                                *
 *                                                                      *
 * Implementation of:       RLib (1.1)                                  *
 *                          (see RLib.doc for full specification)       *
 * Version:                 1.0                                         *
 * Date:                    February 17, 2000                           *
 * Conformance Test Passed: -                                           *
 * Platform:                Every                                       *
 * Requires:                Generic ISO C++ compiler                    *
 *                                                                      *
 * Author:                  Zoran Budimac                               *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: zjb@unsim.ns.ac.yu              *
 *                                                                      *
 * C++ Port Author:         Milos Radovanovic                           *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: radacha@eunet.yu                *
 * -------------------------------------------------------------------- */

#ifndef _M2_RLib_m2h_
#define _M2_RLib_m2h_

#include <_m2sys.h>

namespace RLib {

   /* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError').
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in order of reversed priority)
   */

   const CARDINAL noError         = 0; /* No error ocurred */
   const CARDINAL arithmeticError = 1; /* Error in floating point opeartion */

   REAL Sin(REAL r);
      /* Returns sin(r). */

   REAL Cos(REAL r);
      /* Returns cos(r). */

   REAL SinH(REAL r);
      /* Returns sinh(r). */

   REAL CosH(REAL r);
      /* Returns cosh(r). */

   REAL Exp(REAL r);
      /* Returns e^r. */

   REAL Log(REAL r);
      /* Returns ln(r). */

   REAL Log10(REAL r);
      /* Returns ln(r) for base 10. */

   REAL ATan(REAL r);
      /* Returns arctan(r). */

   REAL ATanH(REAL r);
      /* Returns arctanh(r). */

   REAL Sqrt(REAL r);
      /* Returns square root of 'r'. */

   /* Errors */

   CARDINAL Error();
      /* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part
      */

   typedef void (*ErrorHandler)(_ARRAYOF<CHAR>);

   ErrorHandler errorHandler;
      /* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      */

   struct _ModuleBody {
      _ModuleBody()  { BEGIN(); }
      ~_ModuleBody() { FINALLY(); }

      void BEGIN();
      void FINALLY();
   };

   _ModuleBody _body;

} // RLib

#endif
