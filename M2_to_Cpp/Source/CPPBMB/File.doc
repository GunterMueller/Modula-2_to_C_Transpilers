/* -------------------------------------------------------------------- *
 *                 BMB Modula-2 Cross-Platform Library                  *
 *                              C++ Port                                *
 *                                                                      *
 * Specification of:        File                                        *
 * Description:             File type and file operations               *
 * Implementation level:    Low-level (Necessary module)                *
 *                                                                      *
 * Version:                 1.1                                         *
 * Date:                    February 17, 2000                           *
 *                                                                      *
 * Remarks:                 'EOF' renamed to 'IsEOF' to avoid name      *
 *                          clashes with the standard C library         *
 *                                                                      *
 * Authors:                 Zoran Budimac, Daniel Sendula               *
 *                          (for 'Black Mailbox' Group)                 *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: {zjb,isendula}@unsim.ns.ac.yu   *
 *                                                                      *
 * C++ Port Author:         Milos Radovanovic                           *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: radacha@eunet.yu                *
 * -------------------------------------------------------------------- */

#ifndef _M2_File_m2h_
#define _M2_File_m2h_

#include <_m2sys.h>

namespace File {

   class T;    /* File type */

   /* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError').
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in order of reversed priority)
   */

   const CARDINAL noError;           /* No error */
   const CARDINAL unknownError;      /* Any error not described below */
   const CARDINAL diskFullError;     /* Disk is full */
   const CARDINAL noRoomError;       /* Internal or external storage buffer exceeded */
   const CARDINAL notFileError;      /* Specified file is acctualy a directory */
   const CARDINAL fileNotFoundError; /* Specified file cannot be found */
   const CARDINAL pathNotFoundError; /* Specified directory path cannot be found */
   const CARDINAL readError;         /* Error during read operation */
   const CARDINAL writeError;        /* Error during write operation */
   const CARDINAL priviledgeError;   /* Violation of system privilegdes */
   const CARDINAL handleError;       /* Handle of file operation are incorrect */

   /* Standard files */

   T StdIn();
      /* Returns a standard input file. */

   T StdOut();
      /* Returns a standard output file. */

   T StdErr();
      /* Returns a standard output file for error messages. */

   T StdPrn();
      /* Returns a printer file.
       + Sets error codes:
           'fileNotFoundError' - if 'n' no printer is assigned to the running
                                 console or system (if is single task system)
      */

   /* Opening and closing of a file */

   T Open(_ARRAYOF<CHAR> Name);
      /* Opens an (existing) file with name 's' returning corresponding
         file (handle). File 's' is open in read-write mode.
       + Sets error codes:
           'notFileError'
           'fileNotFoundError'
           'pathNotFoundError'
           'priviledgeError'
           'handleError'
      */

   T OpenRead(_ARRAYOF<CHAR> Name);
      /* Opens an (existing) file with name 's' returning corresponding
         file (handle). File 's' is open in read-only mode.
       + Sets error codes:
           'notFileError'
           'fileNotFoundError'
           'pathNotFoundError'
           'priviledgeError'
           'handleError'
      */

   T Create(_ARRAYOF<CHAR> Name);
      /* Creates a file with name 's' returning corresponding file
         (handle). File is open in write mode.
       + Sets error codes:
           'notFileError'
           'fileNotFoundError' - if a directory with the same name exists
           'pathNotFoundError'
           'priviledgeError'
           'handleError'
      */

   T Append(_ARRAYOF<CHAR> Name);
      /* Opens an (existing) file with name 's' at the end of file,
         returning corresponding file (handle). File 's' is open in
         write mode.
       + Sets error codes:
           'notFileError'
           'fileNotFoundError'
           'pathNotFoundError'
           'priviledgeError'
           'handleError'
      */

   void Close(T f);
      /* Closes (previously open) file 'f'.
       + Sets error codes:
           'handleError'
      */

   BOOLEAN IsInteractive(T f);
      /* Returns TRUE if file is interacive. */

   /* Basic output file operations */

   void WrChar(T f, CHAR ch);
      /* Writes a character 'ch' to a file 'f'.
       + Sets error codes:
           'diskFullError'
           'writeError'
           'priviledgeError'
           'handleError'
      */

   void WrStr(T f, _ARRAYOF<CHAR> s);
      /* Writes a string 's' to a file 'f'.
       + Sets error codes:
           'diskFullError'
           'writeError'
           'priviledgeError'
           'handleError'
      */

   void WrLn(T f);
      /* Writes a new-line mark to a file 'f'.
       + Sets error codes:
           'diskFullError'
           'writeError'
           'priviledgeError'
           'handleError'
      */

   template <class _BYTEARRAY1>
   void WrBin(T f, _BYTEARRAY1 bin, LONGCARD size);
      // Modification: 'bin' is not a parametar by reference
      /* Writes 'size' bytes of array 'bin' to a file 'f'.
       + Sets error codes:
           'diskFullError'
           'writeError'
           'priviledgeError'
           'handleError'
      */

   /* Basic input file operations */

   CHAR RdChar(T f);
      /* Reads and returns a character from a file 'f'.
       + Sets error codes:
           'readError'
           'priviledgeError'
           'handleError'
      */

   void UnRdChar(T& f);
      /* Returns the last read character back to file. Note that
         this procedure can be called only once to un-read the last
         character. If you need more characters un-readm use Seek.
      */

   void RdLine(T f, _ARRAYOF<CHAR>& line);
      /* Reads a 'line' of characters from file 'f' up to
         the end-of-line or end-of-file marker. Markers are
         read-in but are not part of a 'line'.
       + Sets error codes:
           'readError'
           'priviledgeError'
           'handleError'
      */

   void RdLn(T f);
      /* Skips to the first position of the next line in file 'f'.
       + Sets error codes:
           'readError'
           'priviledgeError'
           'handleError'
      */

   template <class BYTEARRAY1>
   LONGCARD RdBin(T f, BYTEARRAY1& bin, LONGCARD size);
      /* Reads 'size' bytes to array 'bin' from a file 'f' and
         returns actual number of read chars. For noninteractive
         streams, 'size' and return value should be equal except
         when EOF is reached.
       + Sets error codes:
           'readError'
           'priviledgeError'
           'handleError'
      */

   BOOLEAN IsEOF(T f);
      /* Returns TRUE if the file 'f' is at the end.
       + Sets error codes:
           'handleError'
      */

   /* Additional file operations */

   LONGCARD Size(T f);
      /* Returns the size of a file 'f'.
       + Sets error codes:
           'handleError'
      */

   LONGCARD Pos(T f);
      /* Returns the file position of the file 'f'.
       + Sets error codes:
           'handleError'
      */

   void Seek(T f, LONGCARD Pos);
      /* Places file position pointer in file 'f' at position 'Pos' bytes
         from beginning of file.
       + Sets error codes:
           'handleError'
      */

   void Flush(T f);
      /* Writes out the buffer of file 'f'.
       + Sets error codes:
           'handleError'
      */

   /* Errors */

   CARDINAL Error();
      /* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part.
      */

   typedef void (*ErrorHandler)(_ARRAYOF<CHAR>);

   ErrorHandler errorHandler;
      /* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      */

} // File

#endif
