/* -------------------------------------------------------------------- *
 *                 BMB Modula-2 Cross-Platform Library                  *
 *                              C++ Port                                *
 *                                                                      *
 * Implementation of:       Fmt (1.1)                                   *
 *                          (see Fmt.doc for full specification)        *
 * Version:                 1.0                                         *
 * Date:                    February 17, 2000                           *
 * Conformance Test Passed: -                                           *
 * Platform:                Every                                       *
 * Requires:                Generic ISO C++ compiler                    *
 *                                                                      *
 * Authors:                 Tamas Cservenak & Zoran Budimac             *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: {icervenak,zjb}@unsim.ns.ac.yu  *
 *                                                                      *
 * C++ Port Author:         Milos Radovanovic                           *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: radacha@eunet.yu                *
 * -------------------------------------------------------------------- */

#ifndef _M2_Fmt_m2h_
#define _M2_Fmt_m2h_

#include <_m2sys.h>

namespace Fmt {

   /* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError').
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in oreder of reversed priority)
   */

   const CARDINAL noError        = 0; /* No Error */
   const CARDINAL noRoomError    = 1; /* No room in destination string */
   const CARDINAL wrongBaseError = 2; /* base < 2 or base > 16 */

   typedef _SubrangeType<CARDINAL, 2, 16> Base; /* Base for numbers */

   void Bool(_ARRAYOF<CHAR>& s, BOOLEAN b);
      /* 's' is string representation ("TRUE" or "FALSE") of boolean 'b'.
         It holds: Scan::Bool(Fmt::Bool(b)) == b.
      */

   void Int(_ARRAYOF<CHAR>& s, INTEGER n);
      /* 's' is string representation of integer 'n', if possible.
         It holds: Scan::Int(Fmt::Int(n)) == n.
      */

   void LongInt(_ARRAYOF<CHAR>& s, LONGINT n);
      /* 's' is  string representation of long integer 'n', if possible.
         It holds: Scan::LongInt(Fmt::LongInt(n)) == n.
      */

   void Card(_ARRAYOF<CHAR>& s, CARDINAL n);
      /* 's' is  string representation of cardinal 'n', if possible.
         It holds: Scan::Card(Fmt::Card(n)) == n.
      */

   void LongCard(_ARRAYOF<CHAR>& s, LONGCARD n);
      /* 's' is  string representation of long cardinal 'n', if possible.
         It holds: Scan::LongCard(Fmt::LongCard(n)) == n.
      */

   void Real(_ARRAYOF<CHAR>& s, REAL x);
      /* 's' is string representation of real 'x', if possible.
         's' is the shortest possible string in scientific notation
         with as much significant decimal places as possible.
         It holds: ABS(Scan::Real(Fmt::Real(x)), x) < 1.0E-6.
      */


   void LongReal(_ARRAYOF<CHAR>& s, LONGREAL x);
      /* 's' is string representation of long real 'x', if possible.
         's' is the shortest possible string in scientific notation
         with as much significant decimal places as possible.
         It holds: ABS(Scan::LongReal(Fmt::LongReal(x)), x) < 1.0E-6.
      */

   void IntB(_ARRAYOF<CHAR>& s, INTEGER n, Base base);
      /* 's' is  string representation in base 'base' of integer 'n',
         if possible.
         It holds: Scan::IntB(Fmt::IntB(n, base), base) == n.
      */

   void LongIntB(_ARRAYOF<CHAR>& s, LONGINT n, Base base);
      /* 's' is  string representation in base 'base' of long integer 'n',
         if possible.
         It holds: Scan::LongIntB(Fmt::LongIntB(n, base), base) == n.
      */

   void CardB(_ARRAYOF<CHAR>& s, CARDINAL n, Base base);
      /* 's' is  string representation in base 'base' of cardinal 'n',
         if possible.
         It holds: Scan::CardB(Fmt::CardB(n, base), base) == n.
      */

   void LongCardB(_ARRAYOF<CHAR>& s, LONGCARD n, Base base);
      /* 's' is  string representation in base 'base' of long cardinal 'n',
         if possible.
         It holds: Scan::LongCardB(Fmt::LongCardB(n, base), base) = n.
      */

   void PadL(_ARRAYOF<CHAR>& s1, _ARRAYOF<CHAR> s,
             CARDINAL n, CHAR ch);
      /* 's1' is a string of length 'n', where 's' is left adjusted,
         and the rest is padded with 'ch'.
      */

   void PadR(_ARRAYOF<CHAR>& s1, _ARRAYOF<CHAR> s,
             CARDINAL n, CHAR ch);
      /* 's1' is a string of length 'n', where 's' is right adjusted,
         and the rest is padded with 'ch'.
      */

   void PadC(_ARRAYOF<CHAR>& s1, _ARRAYOF<CHAR> s,
             CARDINAL n, CHAR ch);
      /* 's1' is a string of length 'n', where 's' is centered,
         and the rest is padded with 'ch'. If number of characters
         to be filled with 'ch' is odd (say n), then n DIV 2
         characters are to the left of the centered 's', and
         (n - (n DIV 2)) characters to teh right of the centered 's'.
      */

   /* Errors */

   CARDINAL Error();
      /* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part.
      */

   typedef void (*ErrorHandler)(_ARRAYOF<CHAR>);

   ErrorHandler errorHandler;
      /* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      */

   struct _ModuleBody {
      _ModuleBody()  { BEGIN(); }
      ~_ModuleBody() { FINALLY(); }

      void BEGIN();
      void FINALLY();
   };

   _ModuleBody _body;

} // Fmt

#endif
