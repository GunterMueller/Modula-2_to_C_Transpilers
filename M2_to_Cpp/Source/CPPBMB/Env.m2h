/* -------------------------------------------------------------------- *
 *                BMB Modula-2 Cross-Platform Library                   *
 *                              C++ Port                                *
 *                                                                      *
 * Implementation of:       Env (1.00)                                  *
 *                          (see Env.doc for full specification)        *
 * Version:                 1.0                                         *
 * Date:                    January 11, 2001                            *
 * Conformance Test Passed: -                                           *
 * Platform:                Every                                       *
 * Requires:                Generic ISO C++ compiler                    *
 *                                                                      *
 * Author:                  Zoran Budimac                               *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: zjb@unsim.ns.ac.yu              *
 *                                                                      *
 * C++ Port Author:         Milos Radovanovic                           *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: radacha@eunet.yu                *
 * -------------------------------------------------------------------- */

#ifndef _M2_Env_m2h_
#define _M2_Env_m2h_

namespace Env {

   /* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError'.
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in order of reversed priority)
   */

   const CARDINAL noError       = 0; /* No Error */
   const CARDINAL unknownError  = 1; /* Error which wasn't provided till now */
   const CARDINAL noRoomError   = 2; /* Internal or external storage buffer exceeded. */
   const CARDINAL wrongArgError = 3; /* Wrong argument supplied */

   CARDINAL Params();
      /* Returns the number of program parameters */

   void GetParam(_ARRAYOF<CHAR>& s, CARDINAL n);
      /* Sets 's' to the 'n'-th program parameter, n > 0 */

   void GetProgramName(_ARRAYOF<CHAR>& s);
      /* Sets 's' to the name of the running program.
         The name is given without the full path even if one is specified
         in program call (in shell). Also in MS-DOS, where extension is
         needed to determine is the file is executable or not, that
         extension is stripped from the program name. */

   void GetProgramPath(_ARRAYOF<CHAR>& s);
      /* Sets 's' to the absolute path from were the program was called */

   BOOLEAN Var(_ARRAYOF<CHAR>& value, _ARRAYOF<CHAR> variable);
      /* Gets 'value' of 'variable' and returns TRUE, if 'variable' is defined.
         Otherwise return FALSE.
         + Sets error code:
           'noRoomError'  - if there is no room for result in 'Value' variable.
      */

   /* Errors */

   CARDINAL Error();
      /* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part.
      */

   typedef void (*ErrorHandler)(_ARRAYOF<CHAR>);

   ErrorHandler errorHandler;
      /* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      */

   void _init(int _argc, char* _argv[]);

   struct _ModuleBody {
      _ModuleBody()  { BEGIN(); }
      ~_ModuleBody() { FINALLY(); }

      void BEGIN();
      void FINALLY();
   };

} // Env

#endif
