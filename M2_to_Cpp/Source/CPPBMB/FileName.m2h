/* -------------------------------------------------------------------- *
 *                 BMB Modula-2 Cross-Platform Library                  *
 *                              C++ Port                                *
 *                                                                      *
 * Implementation of:       FileName (1.1)                              *
 *                          (see FileName.doc for full specification)   *
 * Version:                 1.0                                         *
 * Date:                    February 17, 2000                           *
 * Conformance Test Passed: -                                           *
 * Platform:                Every                                       *
 * Requires:                Generic ISO C++ compiler                    *
 * Portability:             The only issue are 'root' and 'delim'       *
 *                          constants ('\\' on DOS, '/' on *NIX ...).   *
 *                                                                      *
 * Author:                  Daniel Sendula                              *
 *                          (for 'Black Mailbox' Group)                 *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: isendula@unsim.ns.ac.yu         *
 *                                                                      *
 * C++ Port Author:         Milos Radovanovic                           *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: radacha@eunet.yu                *
 * -------------------------------------------------------------------- */

#ifndef _M2_FileName_m2h_
#define _M2_FileName_m2h_

#include <_m2sys.h>

namespace FileName {

   /* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError').
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in order of reversed priority)
   */

   const CARDINAL noError           = 0; /* No error */
   const CARDINAL unknownError      = 1; /* Any error not described below */
   const CARDINAL noRoomError       = 2; /* Internal or external storage buffer exceeded */
   const CARDINAL notFileError      = 3; /* Specified file is acctualy a directory or other filesystem structure */
   const CARDINAL fileNotFoundError = 4; /* Specified file cannot be found */
   const CARDINAL pathNotFoundError = 5; /* Specified directory path cannot be found */
   const CARDINAL priviledgeError   = 6; /* Violation of system privilegdes to set/get time */

#ifdef __DJGPP__
   const CHAR root  = '/';
   const CHAR delim = '/';
#else
   const CHAR root  = '\\';
   const CHAR delim = '\\';
#endif

   BOOLEAN Exists(_ARRAYOF<CHAR> name);
      /* Returns TRUE if a file with name 'name' exists. */

   void Delete(_ARRAYOF<CHAR> name);
      /* Deletes the file with name 'name'. */

   void Rename(_ARRAYOF<CHAR> from, _ARRAYOF<CHAR> to);
      /* Renames the file name 'from' to file name 'to'. */

   void Split(_ARRAYOF<CHAR> fullName,
              _ARRAYOF<CHAR>& dir, _ARRAYOF<CHAR>& name);
      /* Splits the full file name 'fullName' into directory
         name (path) 'dir' and proper filename 'name'. Device
         name is the part of directory name 'dir'.
      */

   void Concat(_ARRAYOF<CHAR>& fullName,
               _ARRAYOF<CHAR> dir, _ARRAYOF<CHAR> name);
      /* Concats the names of directory name (path) 'dir' and
         proper filename 'name' into a full file name 'fullName'.
         Device name is the part of directory name 'dir'.
      */

   /* Errors */

   CARDINAL Error();
      /* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part.
      */

   typedef void (*ErrorHandler)(_ARRAYOF<CHAR>);

   ErrorHandler errorHandler;
      /* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      */

   struct _ModuleBody {
      _ModuleBody()  { BEGIN(); }
      ~_ModuleBody() { FINALLY(); }

      void BEGIN();
      void FINALLY();
   };

   _ModuleBody _body;

} // FileName

#endif
