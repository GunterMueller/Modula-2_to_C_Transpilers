/* -------------------------------------------------------------------- *
 *                 BMB Modula-2 Cross-Platform Library                  *
 *                              C++ Port                                *
 *                                                                      *
 * Implementation of:       Dir (1.1)                                   *
 *                          (see Dir.doc for full specification)        *
 * Version:                 1.0                                         *
 * Date:                    February 16, 2000                           *
 * Conformance Test Passed: -                                           *
 * Platform:                Every                                       *
 * Requires:                Borland C++ 5.5 or                          *
 *                          any other POSIX copliant ISO C++ compiler   *
 *                                                                      *
 * Author:                  Daniel Sendula                              *
 *                          (for 'Black Mailbox' Group)                 *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: isendula@unsim.ns.ac.yu         *
 *                                                                      *
 * C++ Port Author:         Milos Radovanovic                           *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: radacha@eunet.yu                *
 * -------------------------------------------------------------------- */

#ifndef _M2_Dir_m2h_
#define _M2_Dir_m2h_

#include <_m2sys.h>

namespace Dir {

   /* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError').
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in order of reversed priority)
   */

   const CARDINAL noError           = 0; /* No error */
   const CARDINAL unknownError      = 1; /* Any error not described below */
   const CARDINAL diskFullError     = 2; /* Disk is full */
   const CARDINAL noRoomError       = 3; /* Storage buffer exceeded */
   const CARDINAL pathNotFoundError = 4; /* Specified directory path cannot be found */
   const CARDINAL priviledgeError   = 5; /* Violation of system privilegdes to set/get time */

   void Make(_ARRAYOF<CHAR> dir);
      /* Makes a new directory 'dir'. */

   void Remove(_ARRAYOF<CHAR> dir);
      /* Removes a directory 'dir' (if it is empty). */

   void ChangeTo(_ARRAYOF<CHAR> dir);
      /* Changes the current directory to 'dir'. */

   void GetCurrent(_ARRAYOF<CHAR>& dir);
      /* Sets 'dir' to a name of current directory. */

   void GetParent(_ARRAYOF<CHAR>& dir);
      /* Sets 'dir' to the parent of the current directory. */

   /* Errors */

   CARDINAL Error();
      /* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part.
      */

   typedef void (*ErrorHandler)(_ARRAYOF<CHAR>);

   ErrorHandler errorHandler;
      /* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      */

   struct _ModuleBody {
      _ModuleBody()  { BEGIN(); }
      ~_ModuleBody() { FINALLY(); }

      void BEGIN();
      void FINALLY();
   };

   _ModuleBody _body;

} // Dir

#endif
