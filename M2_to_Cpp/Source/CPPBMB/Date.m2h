/* -------------------------------------------------------------------- *
 *                 BMB Modula-2 Cross-Platform Library                  *
 *                              C++ Port                                *
 *                                                                      *
 * Implementation of:       Date (1.1)                                  *
 *                          (see Date.doc for full specification)       *
 * Version:                 1.0                                         *
 * Date:                    February 16, 2000                           *
 * Conformance Test Passed: -                                           *
 * Platform:                DOS compatible                              *
 * Requires:                Generic ISO C++ compiler                    *
 *                                                                      *
 * Author:                  Zoran Budimac                               *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: zjb@unsim.ns.ac.yu              *
 *                                                                      *
 * C++ Port Author:         Milos Radovanovic                           *
 *                              University of Novi Sad, Yugoslavia      *
 *                              e-mail: radacha@eunet.yu                *
 * -------------------------------------------------------------------- */

#ifndef _M2_Date_m2h_
#define _M2_Date_m2h_

#include <_m2sys.h>

namespace Date {

   typedef struct {    /* A 'date' data type */
      CARDINAL day;
      CARDINAL month;
      CARDINAL year;
   } T;

   typedef _SubrangeType<INTEGER, 0, 6> WeekDay;

   /* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError').
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in order of reversed priority)
   */

   const CARDINAL noError         = 0; /* No Error */
   const CARDINAL noRoomError     = 1; /* No room in destination string */
   const CARDINAL conversionError = 2; /* Error in conversion from/to date */
   const CARDINAL wrongDateError  = 3; /* Impossible date generated */
   const CARDINAL priviledgeError = 4; /* Violation of system privilegdes to set/get date */

   /* Accesing the date components */

   CARDINAL Day(T d);
      /* Returns the day of date 'd'. */

   CARDINAL Month(T d);
      /* Returns month of date 'd'. */

   CARDINAL Year(T d);
      /* Returns a year of date 'd'. */

   void SetDay(T& d, CARDINAL n);
      /* Sets day 'n' in date 'd'. */

   void SetMonth(T& d, CARDINAL n);
      /* Sets month 'n' in date 'd'. */

   void SetYear(T& d, CARDINAL n);
      /* Sets year 'n' in date 'd'. */

   void Init(T& d, CARDINAL dd, CARDINAL mm, CARDINAL yy);
      /* Initializes a date 'd' to 'dd' days, 'mm' months and 'yy' years. */

   void Copy(T& d, T d1);
      /* Copies the date 'd1' into the date 'd'. */

   /* Accessing the system date */

   void SetSystemDate(T d);
      /* Sets the system date to date 'd'. */

   void GetSystemDate(T& d);
      /* Gets the system date in 'd'. */

   /* Utilities */

   BOOLEAN IsLeapYear(CARDINAL y);
      /* Returns TRUE if the year 'y' is leap. */

   WeekDay DayOfWeek(T date);
      /* Returns a day of week for date 'd'. 0 is Sunday, ... */

   /* Conversion operations */

   void ToString(_ARRAYOF<CHAR>& str, T d);
      /* Converts the date 'd' to string 'str' in the following
         format: "yyyy/mm/dd".
      */

   void FromString(T& d, _ARRAYOF<CHAR> str);
      /* Converts the string 'str' from format "yyyy/mm/dd" into
         a date 'd'.
      */

   LONGCARD Days(T d);
      /* Returns days corresponding to date 'd'. */

   void FromDays(T& d, LONGCARD days);
      /* Sets 'd' to a date corresponding to 'days'. */

   /* Arithmetic operations */

   void Inc(T& d1, LONGCARD days);
      /* Increments date 'd1' for 'days'. */

   void Dec(T& d1, LONGCARD days);
      /* Decrements date 'd1' for 'days'. */

   void Add(T& d, T d1, T d2);
      /* Adds date 'd1' and 'd2' giving 'd'. */

   void Sub(T& d, T d1, T d2);
      /* Subtracts date 'd2' from 'd1' giving 'd'. */

   /* Errors */

   CARDINAL Error();
      /* Returns an error code for previous operation from this module.
         See the possible error codes in constant declaration part.
      */

   typedef void (*ErrorHandler)(_ARRAYOF<CHAR>);

   ErrorHandler errorHandler;
      /* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      */

   struct _ModuleBody {
      _ModuleBody()  { BEGIN(); }
      ~_ModuleBody() { FINALLY(); }

      void BEGIN();
      void FINALLY();
   };

   _ModuleBody _body;

} // Date

#endif
