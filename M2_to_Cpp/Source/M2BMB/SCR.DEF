(* ------------------------------------------------------------------ *
 *                 BMB Modula-2 Cross-Platform Library                *
 *                                                                    *
 * Implementation of:       Scr                                       *
 *                          (see Scr.doc for full specification!)     *
 * Version:                 1.10                                      *
 * Date:                    December, 1996                            *
 * Conformance Test Passed: -                                         *
 * Platform:                DOS/80x86                                 *
 * Requires:                TopSpeed Modula-2 Compiler Version 1.xx   *
 *                                                                    *
 * Author:                  Bojan Skaljak                             *
 *                            University of Novi Sad, Yugoslavia      *
 * ------------------------------------------------------------------ *)

DEFINITION MODULE Scr;
CONST
    noError          = 0;

(* Color definitions for background and text color*)

    blackColor		=  0;
    blueColor		=  1;
    greenColor		=  2;
    cyanColor		=  3;
    redColor		=  4;
    magentaColor	=  5;
    brownColor		=  6;
    lightGrayColor	=  7;

(* colors definitions only for text color *)

    grayColor		=  8;
    lightBlueColor	=  9;
    lightGreenColor	= 10;
    lightCyanColor	= 11;
    lightRedColor	= 12;
    lightMagentaColor	= 13;
    yellowColor		= 14;
    whiteColor		= 15;

PROCEDURE SetCursorOn;
   (* Turns cursor on *)

PROCEDURE SetCursorOff;
   (* Turns cursor off *)

PROCEDURE CursorOn(): BOOLEAN;
   (* Returns cursor on/off status *)

PROCEDURE GetMaxCoords(VAR x, y: CARDINAL);
   (* Returns maximum coordinates of display screen. Coordinates are
      starting from 0. *)

PROCEDURE CursorX(): CARDINAL;
   (* Returns cursors x coordinate *)

PROCEDURE CursorY(): CARDINAL;
   (* Returns cursors y coordinate *)

PROCEDURE SetCursor(x, y: CARDINAL);
   (* Moves cursor to coordinates (x,y) *)

PROCEDURE Fill(ch: CHAR; foreground, background: CARDINAL);
   (* Fills entire screen with 'ch' writing it with 'foreground' color
      on 'background' color *)

PROCEDURE Save(VAR buffer: ARRAY OF BYTE);
   (* Saves the screen into the 'buffer'. If the buffer is
      not long enough to hold entire screen, only HIGH(buffer)+1 elements
      are stored *)

PROCEDURE Restore(VAR buffer: ARRAY OF BYTE);
   (* Restores the screen from the 'buffer'. If the buffer is
      not long enough to hold entire screen, only HIGH(buffer)+1 elements
      are restored *)

PROCEDURE FillBlock(ch: CHAR; x, y, width, heigth, foreground, background: CARDINAL);
   (* Fills block on the screen with 'ch' between coordinates (x,y) and
      (x+width, y+heigth) in 'foreground' color on
      'background' *)

PROCEDURE CopyBlock(x, y, width, heigth, newX, newY: CARDINAL);
   (* Copies block on the screen between coordinates (x,y) and
      (x+width, y+heigth) to the new position from (newX, newY) to
      (newX+width, newy+heigth) *)

PROCEDURE SaveBlock(x, y, width, height: CARDINAL; VAR buffer: ARRAY OF BYTE);
   (* Saves the part of the screen into the 'buffer'. If the buffer is
      not long enough to hold entire screen, only HIGH(buffer)+1 elements
      are stored *)

PROCEDURE RestoreBlock(x, y, width, height: CARDINAL; VAR buffer: ARRAY OF BYTE);
   (* Restores the part of the screen from the 'buffer'. If the buffer is
      not long enough to hold entire screen, only HIGH(buffer)+1 elements
      are restored *)

PROCEDURE WrCharAt(ch: CHAR; x, y, foreground, background: CARDINAL);
   (* Writes 'ch' at coordinates ('x','y') using 'foreground' color
      on 'background' *)

PROCEDURE WrStrAt(str: ARRAY OF CHAR; x, y, foreground, background: CARDINAL);
   (* Writes 'str' at coordinates ('x','y') using 'foreground' color
      on 'background'. If it falls out of screen it will be clipped. *)

PROCEDURE Beep;
   (* Beeps *)


   (* Errors *)

   PROCEDURE Error(): CARDINAL;
      (* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part *)
TYPE
   ErrorHandler = PROCEDURE(ARRAY OF CHAR);
VAR
   errorHandler: ErrorHandler;
      (* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      *)

END Scr.