(* ---------------------------------------------------------------- *
 *              BMB Modula-2 Cross-Platform Library                 *
 *                                                                  *
 * Specification of:      Env                                       *
 * Description:           Communication with program environment    *
 * Implementation level:  Low-level (Necessary module)              *
 *                                                                  *
 * Version:               1.1                                       *
 * Date:                  December 20, 1996                         *
 *                                                                  *
 * Authors:               Zoran Budimac, Daniel Sendula             *
 *                        (for 'Black Mailbox' Group)               *
 *                            University of Novi Sad, Yugoslavia    *
 *                            e-mail: {zjb,isendula}@unsim.ns.ac.yu *
 * ---------------------------------------------------------------- *)

DEFINITION MODULE Env;

   (* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError'.
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in order of reversed priority)
   *)

   CONST
      noError;            (* No Error *)
      unknownError;       (* Error which wasn't provided till now *)
      noRoomError;        (* Internal or external storage buffer exceeded. *)
      wrongArgError;      (* Wrong argument supplied *)

   PROCEDURE Params(): CARDINAL;
      (* Returns the number of program parameters *)

   PROCEDURE GetParam(VAR s: ARRAY OF CHAR; n: CARDINAL);
      (* Sets 's' to the 'n'-th program parameter, n > 0 *)

   PROCEDURE GetProgramName(VAR s: ARRAY OF CHAR);
      (* Sets 's' to the name of the running program.
         The name is given without the full path even if one is specified
         in program call (in shell). Also in MS-DOS, where extension is
         needed to determine is the file is executable or not, that
         extension is stripped from the program name. *)

   PROCEDURE GetProgramPath(VAR s: ARRAY OF CHAR);
      (* Sets 's' to the absolute path from were the program was called *)

   PROCEDURE Var(VAR value: ARRAY OF CHAR; variable: ARRAY OF CHAR): BOOLEAN;
      (* Gets 'value' of 'variable' and returns TRUE, if 'variable' is defined.
         Otherwise return FALSE.
         + Sets error code:
           'noRoomError'  - if there is no room for result in 'Value' variable.
      *)

   (* Errors *)

   PROCEDURE Error(): CARDINAL;
      (* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part *)

TYPE
   ErrorHandler = PROCEDURE(ARRAY OF CHAR);

VAR
   errorHandler: ErrorHandler;
      (* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      *)

END Env.
