(* ------------------------------------------------------------------ *
 *              BMB Modula-2 Cross-Platform Library                   *
 *                                                                    *
 * Implementation of:       Dir (1.1)                                 *
 *                          (see Dir.doc for full specification!)     *
 * Version:                 1.0                                       *
 * Date:                    October 23, 1996                          *
 * Conformance Test Passed: -                                         *
 * Platform:                80x86 / MS-DOS                            *
 * Requires:                TopSpeed Modula-2 ver. 1.x                *
 * Acknowledgement:         Implementation based on TS FIO module     *
 *                                                                    *
 * Author:                  Daniel Sendula                            *
 *                          (for 'Black Mailbox' Group)               *
 *                              University of Novi Sad, Yugoslavia    *
 *                              e-mail: isendula@unsim.ns.ac.yu       *
 * ------------------------------------------------------------------ *)

DEFINITION MODULE Dir;

   (* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError').
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in order of reversed priority)
   *)

CONST
   noError           = 0;       (* No error. *)
   unknownError      = 1;       (* Any other error described below. *)
   diskFullError     = 2;       (* Disk is full. *)
   noRoomError       = 3;       (* Storage buffer exceeded. *)
   pathNotFoundError = 4;       (* Specified directory path cannot be found. *)
   priviledgeError   = 5;       (* Violation of system privilegdes to set/get time. *)

   PROCEDURE Make(dir: ARRAY OF CHAR);
      (* Makes a new directory 'dir'. *)

   PROCEDURE Remove(dir: ARRAY OF CHAR);
      (* Removes a directory 'dir' (if it is empty). *)

   PROCEDURE ChangeTo(dir: ARRAY OF CHAR);
      (* Changes the current directory to 'dir'. *)

   PROCEDURE GetCurrent(VAR dir: ARRAY OF CHAR);
      (* sets 'dir' to a name of current directory. *)

   PROCEDURE GetParent(VAR dir: ARRAY OF CHAR);
      (* Sets 'dir' to the parent of the current directory. *)

   (* Errors *)

   PROCEDURE Error(): CARDINAL;
      (* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part *)

TYPE
   ErrorHandler = PROCEDURE(ARRAY OF CHAR);
VAR
   errorHandler: ErrorHandler;
      (* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      *)
END Dir.

