(* ------------------------------------------------------------------- *
 *              BMB Modula-2 Cross-Platform Library                    *
 *                                                                     *
 * Implementation of:       DirEntry                                   *
 *                          (see DirEntry.doc for full specification!) *
 * Version:                 1.10                                       *
 * Date:                    October, 1996                              *
 * Conformance Test Passed: -                                          *
 * Platform:                80x86 / MS-DOS                             *
 * Requires:                TopSpeed Modula-2 ver. 1.x                 *
 * Acknowledgement:         Implementation based on TS FIO module      *
 *                                                                     *
 * Author:                Zoran Budimac                                *
 *                        (for 'Black Mailbox' Group)                  *
 *                            University of Novi Sad, Yugoslavia       *
 *                            e-mail: zjb@unsim.ns.ac.yu               *
 * ------------------------------------------------------------------- *)

DEFINITION MODULE DirEntry;

   (* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError').
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in order of reversed priority)
   *)

IMPORT Date, Time;

CONST
   noError           = 0;       (* No error. *)
   unknownError      = 1;       (* Any other error described below. *)
   noRoomError       = 2;       (* Internal or external storage buffer exceeded. *)
   pathNotFoundError = 3;       (* Specified directory path cannot be found. *)
   priviledgeError   = 4;       (* Violation of system privilegdes to set/get time. *)


TYPE
   T = RECORD                (* Directory entry *)
          name: ARRAY [0..29] OF CHAR;
          timeC, timeM: Time.T;
          dateC, dateM: Date.T;
          size: LONGCARD
        END;

   (* Accessing the dir entry components *)

   PROCEDURE Name(VAR Name:ARRAY OF CHAR; e: T);
      (* Gets file or directory name from entry 'e'.
       + Sets error codes:
           'bufferExceeded' if array 'dir' is not large enough.
      *)

   PROCEDURE CrTime(VAR t: Time.T; e: T);
      (* Gets creation time of directory entry 'e'. *)

   PROCEDURE CrDate(VAR d: Date.T; e: T);
      (* Gets creation date of directory entry 'e'. *)

   PROCEDURE ModTime(VAR t: Time.T; e: T);
      (* Gets last modification time of directory entry 'e'. *)

   PROCEDURE ModDate(VAR d: Date.T; e: T);
      (* Gets last modification date of directory entry 'e'. *)

   (* If both of those dates and times are not supported by
      current file system, then "Cr" and "Mod" functions return
      same values for time (date) *)

   PROCEDURE Size(e: T): LONGCARD;
      (* Returns a size of field from directory entry 'e'. If it is
         a directory then returns 0. *)

   PROCEDURE SetPath(filename: ARRAY OF CHAR);
      (* Sets the file name pattern to be searched for in the calls
         of found.
       + Sets error codes:
           'priviledgeError'
           'pathNotFoundError'
      *)

   PROCEDURE Found(VAR e: T): BOOLEAN;
      (* Returns TRUE if direntry 'e' is found for 'filename'.
       + Sets error codes:
           'priviledgeError'
           'unknownError'    - platform specific (file-)system error.
      *)
      (* ZJB : Ne valja opis... *)

   (* Errors *)

   PROCEDURE Error(): CARDINAL;
      (* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part *)

TYPE
   ErrorHandler = PROCEDURE(ARRAY OF CHAR);
VAR
   errorHandler: ErrorHandler;
      (* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      *)
END DirEntry.

(*
   Changes from ver. 1.00:
   - constants for error codes are slighly changed
   - semantics of all operation clarified
   - error handler 'errorHandler' added
*)

