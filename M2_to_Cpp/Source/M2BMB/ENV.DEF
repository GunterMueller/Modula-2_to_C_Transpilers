(* ---------------------------------------------------------------- *
 *                BMB Modula-2 Cross-Platform Library               *
 *                                                                  *
 * Implementation of:     Env (1.00)                                *
 *                          (see Env.doc for full specification!)   *
 * Version:               1.0                                       *
 * Date:                  March, 1995                               *
 * Conformance Test Passed: -                                       *
 * Platform:              80x86 / MS-DOS                            *
 * Requires:              TopSpeed Modula-2 ver. 1.x                *
 *                                                                  *
 * Author:                    Zoran Budimac                         *
 *                            University of Novi Sad, Yugoslavia    *
 *                            e-mail: zjb@unsim.ns.ac.yu            *
 * ---------------------------------------------------------------- *)

DEFINITION MODULE Env;
IMPORT Lib;   (* TopSpeed Low-level routines *)

   (* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError'.
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in order of reversed priority)
   *)


   CONST
      noError = 0;            (* No Error *)
      unknownError = 1;       (* Error which wasn't provided till now *)
      noRoomError  = 2;       (* Internal or external storage buffer exceeded. *)
      wrongArgError = 3;

   Params = Lib.ParamCount;

   PROCEDURE GetParam(VAR s: ARRAY OF CHAR; n: CARDINAL);

   PROCEDURE GetProgramName(VAR s: ARRAY OF CHAR);

   PROCEDURE GetProgramPath(VAR s: ARRAY OF CHAR);

   PROCEDURE Var(VAR Value: ARRAY OF CHAR; variable: ARRAY OF CHAR): BOOLEAN;

   (* Errors *)

   PROCEDURE Error(): CARDINAL;
      (* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part *)
TYPE
   ErrorHandler = PROCEDURE(ARRAY OF CHAR);
VAR
   errorHandler: ErrorHandler;
      (* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      *)

END Env.

(*
   Changes from ver. 1.00:
   - constants for error codes are slighly changed
   - semantics of all operation clarified
   - error handler 'errorHandler' added
*)
