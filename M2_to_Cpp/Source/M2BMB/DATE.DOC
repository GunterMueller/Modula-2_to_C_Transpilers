(* ---------------------------------------------------------------- *
 *              BMB Modula-2 Cross-Platform Library                 *
 *                                                                  *
 * Specification of:      Date                                      *
 * Description:           Date Operations                           *
 * Implementation level:  Low-level (Necessary module)              *
 *                                                                  *
 * Version:               1.1                                       *
 * Date:                  November 27, 1995                         *
 *                                                                  *
 * Authors:               Zoran Budimac, Daniel Sendula             *
 *                        (for 'Black Mailbox' Group)               *
 *                            University of Novi Sad, Yugoslavia    *
 *                            e-mail: {zjb,isendula}@unsim.ns.ac.yu *
 * ---------------------------------------------------------------- *)

DEFINITION MODULE Date;

   (* Correct dates will be calulated for dates between
      years 1582 and 4096. For other years date will also
      be dealt with, but resulting dates will be incorrect.
      More precisely, for the years outside mentioned boundaries,
      it will be assumed the current calendar *)

   TYPE
       T;                     (* The 'date' data type *)
       WeekDay = [0..6];      (* 0 is Sunday, 1 is Monday, ... *)

   (* Error codes. Some of these will be set by some of
      the following operations. Once set, error codes will
      remain in effect until:
      - new error code is generated
      - function 'Error' is called (that will reset the code to 'noError').
      Only the call to 'Error' will reset the error code back to 'noError'!

      If some operation sets more than one error code, then the error
      code with highest priority will be set.

      Error codes are the following: (in order of reversed priority)
   *)

   CONST
      noError;                (* No Error *)
      noRoomError;            (* No room in destination string *)
      conversionError;        (* Error in conversion from/to date *)
      wrongDateError;         (* Impossible date generated *)
      priviledgeError;        (* Violation of system privilegdes to set/get date *)

   (* Accesing the date components *)

   PROCEDURE Day(d: T): CARDINAL;
      (* Returns the day of date 'd' *)

   PROCEDURE Month(d: T): CARDINAL;
      (* Returns the month of date 'd' *)

   PROCEDURE Year(d: T): CARDINAL;
      (* Returns the year of date 'd' *)

   PROCEDURE SetDay(VAR d: T; n: CARDINAL);
      (* Sets day 'n' in date 'd'
         + Sets error codes:
           'wrongDateError' - if 'n' < 1 or 'n' > 31
      *)

   PROCEDURE SetMonth(VAR d: T; n: CARDINAL);
      (* Sets month 'n' in date 'd'
         + Sets error codes:
           'wrongDateError' - if 'n' < 1 or 'n' > 12
      *)

   PROCEDURE SetYear(VAR d: T; n: CARDINAL);
      (* Sets year 'n' in date 'd' *)

   PROCEDURE Init(VAR d: T; dd, mm, yy: CARDINAL);
      (* Initializes a date 'd' to 'dd' days, 'mm' months
         and 'yy' years
         + Sets error codes:
           'wrongDateError' - if 'd' was not properly constructed
      *)

   PROCEDURE Copy(VAR d: T; d1: T);
      (* Copies the date 'd1' into the date 'd' *)

   (* Accessing the system date *)

   PROCEDURE SetSystemDate(d: T);
      (* Sets the system date to date 'd'
         + Sets error codes:
           'priviledgeError' - if 'd' cannot be set due to lack of
                               priviledges
      *)

   PROCEDURE GetSystemDate(VAR d: T);
      (* Gets the system date in 'd' *)
         + Sets error codes:
           'priviledgeError' - if 't' cannot be set due to lack of
                               priviledges
      *)


   (* Utilities *)

   PROCEDURE IsLeapYear(y: CARDINAL): BOOLEAN;
      (* Returns TRUE if the year 'y' is leap *)

   PROCEDURE DayOfWeek(d: T): WeekDay;
      (* Returns a day of week for date 'd'. 0 is Sunday, ... *)

   (* Conversion operations *)

   PROCEDURE ToString(VAR str: ARRAY OF CHAR; d: T);
      (* Converts the date 'd' to string 'str' in the following
         format: "yyyy/mm/dd".
         + Sets error codes:
           'noRoomError' - if 'd' cannot fit in 'str'
      *)

   PROCEDURE FromString(VAR d: T; str: ARRAY OF CHAR);
      (* Converts the string 'str' from format "yyyy/mm/dd" into
         a date 'd'
         + Sets error codes:
           'conversionError' - if 'str' is not in proper format,
           'wrongDateError'  - if constructed time is not valid
      *)

   PROCEDURE Days(d: T): LONGCARD;
      (* Returns days corresponding to date 'd' *)

   PROCEDURE FromDays(VAR d: T; days: LONGCARD);
      (* Sets 'd' to a date corresponding to 'days' *)

   (* Arithmetic operations *)

   PROCEDURE Inc(VAR d1: T; days: LONGCARD);
      (* Increments date 'd1' for 'days' *)

   PROCEDURE Dec(VAR d1: T; days: LONGCARD);
      (* Decrements date 'd1' for 'days' *)

   PROCEDURE Add(VAR d: T; d1, d2: T);
      (* Adds date 'd1' and 'd2' giving 'd' *)

   PROCEDURE Sub(VAR d: T; d1, d2: T);
      (* Subtracts date 'd2' from 'd1' giving 'd' *)

   (* Errors *)

   PROCEDURE Error(): CARDINAL;
      (* Returns an error code and resets it to 'noError'.
         See the possible error codes in constant declaration part *)

TYPE
   ErrorHandler = PROCEDURE(ARRAY OF CHAR);
VAR
   errorHandler: ErrorHandler;
      (* Initially contains procedure that will in case of an error
         print the appropriate message and stop the program execution. It
         can be replaced with user-defined procedure of type ErrorHandler.
      *)
END Date.

(*
   Changes from ver. 1.00:
   - constants for error codes are slighly changed
   - semantics of all operation clarified
   - error handler 'errorHandler' added
   - 'Copy' added
*)
