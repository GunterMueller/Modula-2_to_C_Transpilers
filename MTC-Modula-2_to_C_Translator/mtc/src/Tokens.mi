(*
 *	M T C  -  Modula-2 to C Translator
 *      ----------------------------------
 *
 *	Purpose: defines codes of tokens, prints tokens and sets of tokens
 *
 *	$Author: grosch $
 *	$Date: 1991/11/21 16:57:59 $
 *	$Revision: 1.3 $
 *
 ***)

IMPLEMENTATION MODULE Tokens;

FROM IO		IMPORT tFile, WriteC, WriteS;

CONST BitsPerBitset	= 32;

(*------- IsElement ----------------------------------------------------------*)

PROCEDURE IsElement (VAR Set: tTokenSet; Elmt: tToken): BOOLEAN;
  BEGIN
    RETURN (Elmt MOD BitsPerBitset) IN (Set [Elmt DIV BitsPerBitset]);
  END IsElement;

(*------- WriteTokenSet ------------------------------------------------------*)

PROCEDURE WriteTokenSet (f: tFile; TokenSet: tTokenSet);
  VAR
    Token : tToken;
  BEGIN
    FOR Token := TokEOF TO TokForeign DO
      IF IsElement (TokenSet, Token) THEN
	WriteToken (f, Token);
	WriteC (f, ' ');
      END;
    END;
  END WriteTokenSet;

(*------- WriteToken ---------------------------------------------------------*)
     
PROCEDURE WriteToken (f: tFile; Token: tToken);
  BEGIN
    CASE Token OF
      | TokEOF		: WriteS (f, "End-of-Tokens"	);
      | TokIdent	: WriteS (f, "Ident"		);
      | TokDecConst	: WriteS (f, "Integer"		);
      | TokOctalConst	: WriteS (f, "Integer"		);
      | TokHexConst	: WriteS (f, "Integer"		);
      | TokCharConst	: WriteS (f, "Char"		);
      | TokRealConst	: WriteS (f, "Real"		);
      | TokStringConst	: WriteS (f, "String"		);
      | TokNotEqual	: WriteS (f, "'#'"		);
      | TokLParent	: WriteS (f, "'('"		);
      | TokRParent	: WriteS (f, "')'"		);
      | TokTimes	: WriteS (f, "'*'"		);
      | TokPlus		: WriteS (f, "'+'"		);
      | TokComma	: WriteS (f, "','"		);
      | TokMinus	: WriteS (f, "'-'"		);
      | TokDot		: WriteS (f, "'.'"		);
      | TokRange	: WriteS (f, "'..'"		);
      | TokDivide	: WriteS (f, "'/'"		);
      | TokColon	: WriteS (f, "':'"		);
      | TokAssign	: WriteS (f, "':='"		);
      | TokSemiColon	: WriteS (f, "';'"		);
      | TokLess		: WriteS (f, "'<'"		);
      | TokLessEqual	: WriteS (f, "'<='"		);
      | TokEqual	: WriteS (f, "'='"		);
      | TokGreater	: WriteS (f, "'>'"		);
      | TokGreaterEqual	: WriteS (f, "'>='"		);
      | TokLBracket	: WriteS (f, "'['"		);
      | TokRBracket	: WriteS (f, "']'"		);
      | TokArrow	: WriteS (f, "'^'"		);
      | TokLBrace	: WriteS (f, "'{'"		);
      | TokBar		: WriteS (f, "'|'"		);
      | TokRBrace	: WriteS (f, "'}'"		);
      | TokAnd		: WriteS (f, "AND"		);
      | TokArray	: WriteS (f, "ARRAY"		);
      | TokBegin	: WriteS (f, "BEGIN"		);
      | TokBy		: WriteS (f, "BY"		);
      | TokCase		: WriteS (f, "CASE"		);
      | TokConst	: WriteS (f, "CONST"		);
      | TokDefinition	: WriteS (f, "DEFINITION"	);
      | TokDiv		: WriteS (f, "DIV"		);
      | TokDo		: WriteS (f, "DO"		);
      | TokElse		: WriteS (f, "ELSE"		);
      | TokElsif	: WriteS (f, "ELSIF"		);
      | TokEnd		: WriteS (f, "END"		);
      | TokExit		: WriteS (f, "EXIT"		);
      | TokExport	: WriteS (f, "EXPORT"		);
      | TokFor		: WriteS (f, "FOR"		);
      | TokFrom		: WriteS (f, "FROM"		);
      | TokIf		: WriteS (f, "IF"		);
      | TokImplementation:WriteS (f, "IMPLEMENTATION"	);
      | TokImport	: WriteS (f, "IMPORT"		);
      | TokIn		: WriteS (f, "IN"		);
      | TokLoop		: WriteS (f, "LOOP"		);
      | TokMod		: WriteS (f, "MOD"		);
      | TokModule	: WriteS (f, "MODULE"		);
      | TokNot		: WriteS (f, "NOT"		);
      | TokOf		: WriteS (f, "OF"		);
      | TokOr		: WriteS (f, "OR"		);
      | TokPointer	: WriteS (f, "POINTER"		);
      | TokProcedure	: WriteS (f, "PROCEDURE"	);
      | TokQualified	: WriteS (f, "QUALIFIED"	);
      | TokRecord	: WriteS (f, "RECORD"		);
      | TokRepeat	: WriteS (f, "REPEAT"		);
      | TokReturn	: WriteS (f, "RETURN"		);
      | TokSet		: WriteS (f, "SET"		);
      | TokThen		: WriteS (f, "THEN"		);
      | TokTo		: WriteS (f, "TO"		);
      | TokType		: WriteS (f, "TYPE"		);
      | TokUntil	: WriteS (f, "UNTIL"		);
      | TokVar		: WriteS (f, "VAR"		);
      | TokWhile	: WriteS (f, "WHILE"		);
      | TokWith		: WriteS (f, "WITH"		);
      | TokForeign	: WriteS (f, "FOREIGN"		);
    ELSE
      WriteS (f, "illegal token code");
    END;
  END WriteToken;

END Tokens.
