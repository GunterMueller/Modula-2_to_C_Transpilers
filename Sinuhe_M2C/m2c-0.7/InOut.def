DEFINITION MODULE InOut;
IMPORT ASCII;
 (* WriteInt,WriteCard,WriteOct,WriteHex are retained for compatibility *)

 CONST
  EOL=ASCII.lf;

 VAR
  Done:BOOLEAN;
  termCh:CHAR;

 PROCEDURE OpenInput(Ext:ARRAY OF CHAR);
  (* File name is entered. The file becomes current input file ("in")  *)
  (* If OpenInput succeeds, Done=TRUE and subsequent input is taken    *)
  (*   from the streem until Closeinput is called.                     *)
  (* If the name is ended at the point, defext is appended to the name *)

 PROCEDURE OpenOutput(Ext:ARRAY OF CHAR);
  (* Analogous to OpenOutput but for current output file ("out") *)


 PROCEDURE CloseInput;
  (* Close current input file. Current input file becomes terminal *)

 PROCEDURE CloseOutput;
  (* Close current output file. Current output file becomes terminal *)

 PROCEDURE Read(VAR ch:CHAR);
  (* Done := NOT in.eof *)

 PROCEDURE ReadString(VAR s:ARRAY OF CHAR);
  (* Read a string (see string determination, leading blanks is ignored) *)
  (*   from open input stream.                                           *)
  (* Input is ended at any char <= " ". The char is assigned to termCh.  *)
  (* DEL is processed normally.                                          *)

 PROCEDURE ReadInt(VAR x:INTEGER);
  (* Read a string and transform it to an integer.  *)
  (* Syntax of integer: ["+" | "-"]digit{digit}     *)
  (* Done := "integer is read".                     *)

 PROCEDURE ReadShortInt(VAR x:SHORTINT);
  (* Analogous to ReadInt but for short integer *)

 PROCEDURE ReadLongInt(VAR x:LONGINT);
  (* Analogous to ReadInt but for long integer *)

 PROCEDURE ReadCard(VAR x:CARDINAL);
  (* Analogous to ReadInt but for cardinal  *)
  (* Syntax of cardinal: digit{digit}       *)

 PROCEDURE ReadShortCard(VAR x:SHORTCARD);
  (* Analogous to ReadCard but for short cardinal *)

 PROCEDURE ReadLongCard(VAR x:LONGCARD);
  (* Analogous to ReadCard but for long cardinal *)

 PROCEDURE Write(ch:CHAR);

 PROCEDURE WriteLn;

 PROCEDURE WriteString(s:ARRAY OF CHAR);
  (* See string determination *)

 PROCEDURE WriteInt(x:INTEGER;n:CARDINAL);
  (* Write an integer to the current output stream                   *)
  (* If n is greater than needed positions, leading blanks is output *)

 PROCEDURE WriteLongInt(x:LONGINT;n:CARDINAL);
  (* Analogous WriteInt but for long integer *)

 PROCEDURE WriteCard(x,n:CARDINAL);

 PROCEDURE WriteLongCard(x:LONGCARD;n:CARDINAL);

 PROCEDURE WriteOct(x,n:CARDINAL);

 PROCEDURE WriteLongOct(x:LONGCARD;n:CARDINAL);

 PROCEDURE WriteHex(x,n:CARDINAL);

 PROCEDURE WriteLongHex(x:LONGCARD;n:CARDINAL);

END InOut.
