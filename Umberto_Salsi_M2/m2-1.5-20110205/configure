#!/bin/bash

missing=include/missing.c

#if [ -f $missing ]; then
#	echo "Configuration already done, ok."
#	echo "To force reconfiguration, remove the file $missing"
#	exit
#fi
> $missing


echo "Guessing system type:"
t=$( uname | tr a-z A-Z ) 2>&1
if [ $? -eq 0 ]; then
	case $t in
	*BSD*) t=BSD ;;
	*CYGWIN*) t=CYGWIN ;;
	*LINUX*) t=LINUX ;;
	*MINGW*) t=MINGW ;;
	*) t=UNKNOWN ;;
	esac
fi
echo "Your system type is: $t"
echo "#define M2_SYSTEM_TYPE \"$t\"" >> $missing
echo "#define M2_SYSTEM_TYPE_$t" >> $missing


echo "Checking compiler:"
cc --version 2>&1 >/dev/null \
|| cc -v  2>&1 >/dev/null
if [ $? -eq 0 ]; then
	echo "...ok"
else
	echo "ERROR: cc command missing or not in PATH."
	exit 1
fi


echo "Checking alloca():"
cat > try.c <<EOT
#include <alloca.h>
int main(){ alloca(1); }
EOT
cc try.c -o try 2>&1
if [ $? -eq 0 ]; then
	echo "...ok"
else
	echo
	echo "NOTICE: alloca() function missing -- using alternative code."
	echo "#include \"alloca.c\"" >> $missing
	echo
fi


echo "Checking vasprintf():"
echo "int main(){ vasprintf(); }" > try.c
cc try.c -o try 2>&1
if [ $? -eq 0 ]; then
	echo "...ok"
else
	echo
	echo "NOTICE: vasprintf() missing - using alternative code."
	echo "#include \"vasprintf.c\"" >> $missing
	echo
fi


echo "Checking Garbage Collector (GC) library:"
cat > try.c <<EOT
#include <gc/gc.h>
int main(){ GC_INIT(); }
EOT
cc try.c -lgc -o try 2>&1
if [ $? -eq 0 ]; then
	echo "...ok"
	echo "#define USE_GC" >> $missing
else
	echo
	echo "WARNING: gc.h or libcg.so missing or unexpected library path."
	echo
	echo "         The generated programs will consume more memory than"
	echo "         necessary, but apart that they will work fine."
	echo "         If you decide to install the GC later, remember to re-run"
	echo "         this configure script. There is no need to re-run 'make',"
	echo "         but your program will need to be re-compiled in order"
	echo "         to take advantage from the GC support."
	echo
fi


# Adds the INTSTR() macro to the $missing file.
#
# The INTSTR() translates a sequence of bytes that encode an int into
# a literal string. The sequence of bytes are in LE order, whereas the
# generated literal string uses the byte ordering of the underlying HW.
#
# This macro is used to encode literal strings, that is literal values
# for the STRING type of M2. In fact, a STRING starts with int(0) that
# encodes the type (0 means STRING), and a int(len) that encodes the
# length of the string in bytes; the 'len' bytes of the string follow.
# So the generated C sources are independendent from the byte ordering,
# and these intermediate C sources can be distributed with a chance they
# may work on several different HW platform.
#
# The processor word size, that is sizeof(int), and the byte ordering
# are detected with the little program that follows:

echo "Guessing processor endianess:"
echo "...compiling endianess_guess.c"

cat << EOT > endianess_guess.c
/*
	endianess - Detect endianess of the processor.

	2006-12-20 Umberto Salsi <salsi@icosaedro.it>

	Output for 32-bit processors:
	"1234": little endian
	"4321": big endian
	"3412": PDP endian

	Output for 64-bit processors:
*/

#include <stdio.h>

int main()
{
	int i, k, n;
	unsigned char *p;

	/*
		Fill-in the number n with 1 in the least significat byte,
		2 in the second byte, and so on.
	*/
	k = 1;
	n = 0;
	for( i=0; i < sizeof(int); i++ ){
		n += (i+1)*k;
		k *= 256;
	}

	/*
		Scan the number n byte-per-byte, and print its value.
	*/
	p = (unsigned char *) &n;
	for( i=0; i < sizeof(int); i++ ){
		printf("%x", *p);
		p++;
	}
	printf("\n");

	return 0;
}
EOT

cc -Wall endianess_guess.c -o endianess_guess
if [ $? -ne 0 ]; then
	echo "ERROR: failed to compile endianess_guess.c"
	exit 1
fi

endianess=$(./endianess_guess)
rm endianess_guess.c endianess_guess
echo "...detected byte ordering: $endianess"
case $endianess in

1234) macro="INTSTR(b1,b2,b3,b4) #b1#b2#b3#b4" ;;

4321) macro="INTSTR(b1,b2,b3,b4) #b4#b3#b2#b1" ;;

3412) macro="INTSTR(b1,b2,b3,b4) #b3#b4#b1#b2" ;;

12345678) macro="INTSTR(b1,b2,b3,b4,b5,b6,b7,b8) #b1#b2#b3#b4#b5#b6#b7#b8" ;;

*)
	echo "ERROR: unsupported byte ordering $endianess"
	exit 1
	;;

esac

echo "#define $macro" >> $missing

rm -f try.c try try.exe
echo "Configuration file '$missing' successfully generated."
